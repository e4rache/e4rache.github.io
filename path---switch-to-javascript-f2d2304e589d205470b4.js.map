{"version":3,"sources":["webpack:///path---switch-to-javascript-f2d2304e589d205470b4.js","webpack:///./.cache/json/switch-to-javascript.json"],"names":["webpackJsonp","335","module","exports","data","markdownRemark","html","frontmatter","path","title","date","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,k+DAAwMC,aAAizDC,KAAA,wBAAAC,MAAA,mDAAAC,KAAA,gBAAgHC","file":"path---switch-to-javascript-f2d2304e589d205470b4.js","sourcesContent":["webpackJsonp([195555434578979],{\n\n/***/ 335:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>I've been a 6+ years Java developer.\\nHere a the reasons one would want to make that switch.</p>\\n<p>Java is full of boilerplate code which obscures the programmers intention\\nSpring &#x26; Spring Boot teach a lesson: papering over complexity creates more complexity\\nJava EE was a “design by committee” project that covers everything of everything in Enterprise application development, hence is exceedingly complex\\nThe experience of Spring programming is it’s great until it isn’t, until that day an obscure impossible-to-understand Exception appears out of the depths of a subsystem you’ve never heard of requiring 3+ days just to figure out the problem\\nWhat is the overhead required in the framework to allow coders to write zero code?\\nWhile IDE’s like Eclipse are powerful, they are a symptom of Java’s complexity\\nNode.js was the result of one guy honing and refining a vision of a lightweight event driven architecture, until Node.js revealed itself\\nThe JavaScript community seems to appreciate removing boilerplate allowing the programmers intention to shine\\nThe solution for Callback Hell, the async/await function, is an example of removing boilerplate so the programmers intention shines\\nCoding with Node.js is a joy\\nJavaScript lacks the strict type checking of Java, which is a blessing and a curse. Code is easier to write but requires more testing to ensure correctness\\nThe npm/yarn package management system is excellent and joyful to use, versus the abomination that is Maven\\nBoth Java and Node.js offer excellent performance, running counter to the myth that JavaScript is slow and therefore Node.js performance must be bad\\nNode.js performance is riding the coattails of Google investment in V8 to speed up the Chrome browser\\nThe intense competition between browsers is making JavaScript more and more powerful every year, benefitting Node.js</p>\\n<p><a href=\\\"blog.sourcerer.io\\\">https://blog.sourcerer.io/why-is-a-java-guy-so-excited-about-node-js-and-javascript-7cfc423efb44</a></p>\",\"frontmatter\":{\"path\":\"/switch-to-javascript\",\"title\":\"Why I switched from Java to JavaScript / Node.js\",\"date\":\"2018-08-28\"}}},\"pathContext\":{}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---switch-to-javascript-f2d2304e589d205470b4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>I've been a 6+ years Java developer.\\nHere a the reasons one would want to make that switch.</p>\\n<p>Java is full of boilerplate code which obscures the programmers intention\\nSpring &#x26; Spring Boot teach a lesson: papering over complexity creates more complexity\\nJava EE was a “design by committee” project that covers everything of everything in Enterprise application development, hence is exceedingly complex\\nThe experience of Spring programming is it’s great until it isn’t, until that day an obscure impossible-to-understand Exception appears out of the depths of a subsystem you’ve never heard of requiring 3+ days just to figure out the problem\\nWhat is the overhead required in the framework to allow coders to write zero code?\\nWhile IDE’s like Eclipse are powerful, they are a symptom of Java’s complexity\\nNode.js was the result of one guy honing and refining a vision of a lightweight event driven architecture, until Node.js revealed itself\\nThe JavaScript community seems to appreciate removing boilerplate allowing the programmers intention to shine\\nThe solution for Callback Hell, the async/await function, is an example of removing boilerplate so the programmers intention shines\\nCoding with Node.js is a joy\\nJavaScript lacks the strict type checking of Java, which is a blessing and a curse. Code is easier to write but requires more testing to ensure correctness\\nThe npm/yarn package management system is excellent and joyful to use, versus the abomination that is Maven\\nBoth Java and Node.js offer excellent performance, running counter to the myth that JavaScript is slow and therefore Node.js performance must be bad\\nNode.js performance is riding the coattails of Google investment in V8 to speed up the Chrome browser\\nThe intense competition between browsers is making JavaScript more and more powerful every year, benefitting Node.js</p>\\n<p><a href=\\\"blog.sourcerer.io\\\">https://blog.sourcerer.io/why-is-a-java-guy-so-excited-about-node-js-and-javascript-7cfc423efb44</a></p>\",\"frontmatter\":{\"path\":\"/switch-to-javascript\",\"title\":\"Why I switched from Java to JavaScript / Node.js\",\"date\":\"2018-08-28\"}}},\"pathContext\":{}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/switch-to-javascript.json\n// module id = 335\n// module chunks = 195555434578979"],"sourceRoot":""}